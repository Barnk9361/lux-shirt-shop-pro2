const crypto=require("crypto");
function base64url(i){return Buffer.from(i).toString("base64").replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}
function requireSecret(){const s=process.env.SECRET_KEY;if(!s)throw new Error("Missing SECRET_KEY environment variable");return s}
function signJWT(payload,expSec=86400){const header={alg:"HS256",typ:"JWT"};const now=Math.floor(Date.now()/1000);const exp=now+expSec;const p1=base64url(JSON.stringify(header));const p2=base64url(JSON.stringify({...payload,iat:now,exp}));const data=`${p1}.${p2}`;const sig=crypto.createHmac("sha256",requireSecret()).update(data).digest("base64").replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_");return `${data}.${sig}`}
function verifyJWT(tok){try{const [p1,p2,s]=tok.split(".");const data=`${p1}.${p2}`;const expect=crypto.createHmac("sha256",requireSecret()).update(data).digest("base64").replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_");if(expect!==s)return null;const payload=JSON.parse(Buffer.from(p2.replace(/-/g,"+").replace(/_/g,"/"),"base64").toString());if(payload.exp&&payload.exp<Math.floor(Date.now()/1000))return null;return payload}catch(e){return null}}
function json(status,data,extra={}){return{statusCode:status,headers:{"Content-Type":"application/json","Cache-Control":"no-store",...extra},body:JSON.stringify(data)}}function parseBody(ev){try{return JSON.parse(ev.body||"{}")}catch{return{}}}
function getCookie(ev,name){const c=(ev.headers.cookie||ev.headers.Cookie||"");const m=c.match(new RegExp(`(?:^|;\s*)${name}=([^;]+)`));return m?decodeURIComponent(m[1]):null}
function setCookie(name,value,{maxAge=86400,path="/",httpOnly=true,secure=true,sameSite="Lax"}={}){const parts=[`${name}=${encodeURIComponent(value)}`,`Max-Age=${maxAge}`,`Path=${path}`,`SameSite=${sameSite}`];if(httpOnly)parts.push("HttpOnly");if(secure)parts.push("Secure");return parts.join("; ")}
const memStores={};async function getStore(name){try{const mod=await import("@netlify/blobs");const store=mod.getStore({name});return{async get(k){const v=await store.get(k);return v?JSON.parse(v):null},async set(k,val){await store.set(k,JSON.stringify(val))},async list(){const r=await store.list();return r.blobs.map(b=>b.key)},async del(k){await store.delete(k)}}}catch{if(!memStores[name])memStores[name]=new Map();const s=memStores[name];return{async get(k){return s.get(k)??null},async set(k,val){s.set(k,val)},async list(){return Array.from(s.keys())},async del(k){s.delete(k)}}}}
module.exports={signJWT,verifyJWT,json,parseBody,getCookie,setCookie,getStore}
